/*С помощью многопоточности реализуйте простую модель железнодорожного вокзала.
С трёх точек отправления в разное время отбывают три разных поезда с условными обозначениями A, B, C. Все они идут на один и тот же вокзал и могут дойти до него в разное время.
На этом целевом вокзале единовременно может находиться только один поезд. Остальные поезда должны ждать, пока уже занятое место освободится.
В начале программы пользователь последовательно вводит для каждого поезда время в пути до вокзала (в секундах). После этого поезда начинают своё движение за заданное количество времени. Как только поезд прибыл на вокзал,
он ожидает от пользователя команды depart, которая сигнализирует о его отбытии с вокзала.
По всем событиям (прибытие на вокзал, ожидание свободного места, отбытие с вокзала) вместе с условным обозначением поезда выводятся сообщения в консоль.
Программа завершается, когда на вокзале побывают все три поезда.

Советы и рекомендации
Используйте для вокзала отдельный мьютекс и симулируйте ожидание с помощью него.*/


#include <chrono>
#include <iostream>
#include <mutex>
#include <string>
#include <thread>

using namespace std;

mutex mt;
bool stationOccupied = false;

static void trainArrival(string trainName, int travelTime)
{
    this_thread::sleep_for(chrono::seconds(travelTime));

    {
        std::lock_guard<std::mutex> lock(mt);
        std::cout << trainName << " прибыл на вокзал." << endl;
    }

    string command;
    cout << "Ожидание команды: ";
    cin >> command;

    {
        lock_guard<std::mutex> lock(mt);
        stationOccupied = false;
        cout << trainName << " отбыл с вокзала." << endl;
    }
}

void task2()
{
    int arrivalTimeOfTrainA;
    int arrivalTimeOfTrainB;
    int arrivalTimeOfTrainC;

    cout << "Введите время прибытия поездов на станцию: ";
    cin >> arrivalTimeOfTrainA >> arrivalTimeOfTrainB >> arrivalTimeOfTrainC;

    thread trainA(trainArrival, "Поезд A", arrivalTimeOfTrainA);
    thread trainB(trainArrival, "Поезд B", arrivalTimeOfTrainB);
    thread trainC(trainArrival, "Поезд C", arrivalTimeOfTrainC);

    trainA.join();
    trainB.join();
    trainC.join();
}